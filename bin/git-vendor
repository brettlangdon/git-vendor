#!/bin/sh
#
# git-vendor.sh: manage vendored repos via git-subtree
#
# Copyright (c) 2016 Brett Langdon <me@brett.is>
#
_usage()
{
    cat <<EOF
Usage:
  git vendor --help
  git vendor add [--prefix <dir>] <name> <repository> [<ref>]
  git vendor list [<name>]
  git vendor remove <name>
  git vendor update <name> [<ref>]
EOF
}

PATH=$PATH:$(git --exec-path)
. git-sh-setup
require_work_tree

[ "$#" -eq 0 ] && _usage && exit 1

#some default command values
ref="master"

#default option values
prefix="vendor"

while [ "$#" -gt 0 ] ; do
	argument="$1"
	shift

	case "$argument" in
		"add")
			[ $# -lt 2 ] && die "Incorrect options provided: git vendor add <name> <repository> [<ref>]" && exit 1
			command=$argument
			name="$1" && shift
			repository="$1" && shift
			[ -n "$1" ] && [ -n "${1##--*}" ] && ref="$1" && shift
			;;
		"list")
			command=$argument
			[ -n "$1" ] && [ -n "${1##--*}" ] && show_only="$1" && shift
			;;
		"remove")
			[ $# -lt 1 ] && die "Incorrect options provided: git vendor remove <name>" && exit 1
			command=$argument
			name="$1" && shift
			;;
		"update")
			[ $# -lt 1 ] && die "Incorrect options provided: git vendor update <name> [<ref>]" && exit 1
			command=$argument
			name="$1" && shift
			[ -n "$1" ] && [ -n "${1##--*}" ] && ref="$1" && shift
			;;
		"--prefix") prefix="$1" && shift ;;
		"--help") _usage && exit ;;
		*) >&2 echo "error: unknown option \"$argument\"" && _usage && exit 1 ;;
	esac
done

[ -z $command ] && _usage && exit 1

vendor_names_from_log()
{
    name=
    dir=
    git log --grep="^git-vendor-name: .*\$" \
	--pretty=format:'START %H%n%s%n%n%b%nEND%n' HEAD |
	while read a b junk; do
	    case "$a" in
		START) ;;
		git-vendor-name:) name="$b" ;;
                git-vendor-dir:) dir="$b" ;;
		END)
                    # Only consider dependencies which still exist on disk
                    if [ -d "$dir" ]; then
                        echo "$name"
                    fi
                    name=
                    dir=
                    ;;
	    esac
	done | sort -u
}

vendor_git_log_first()
{
    name="$1"
    git log -1 --grep="^git-vendor-name: $name\$" --pretty=format:'START %H%n%s%n%n%b%nEND%n' HEAD
}

cmd_add()
{
    require_clean_work_tree

    dir="$prefix/$(echo "$repository" | sed -E 's/^[a-zA-Z]+((:\/\/)|@|(:\/\/git@))//' | sed -E 's/:[0-9]+//' | sed -E 's/\.git$//')"
    message="\
Add \"$name\" from \"$repository@$ref\"

git-vendor-name: $name
git-vendor-dir: $dir
git-vendor-repository: $repository
git-vendor-ref: $ref
"
    set -x
    git subtree add --prefix "$dir" --message "$message" "$repository" "$ref" --squash
}

cmd_list()
{
    for name in $(vendor_names_from_log);
    do
        vendor_git_log_first "$name" |
	    while read a b junk; do
	        case "$a" in
		    START) commit="$b" ;;
                    git-vendor-name:) name="$b" ;;
                    git-vendor-dir:) dir="$b" ;;
                    git-vendor-ref:) ref="$b" ;;
		    git-vendor-repository:) repository="$b" ;;
		    END)
                        if [ ! -z "$repository" ];
                        then
                            if [ -z "$show_only" -o "$show_only" = "$name" ]; then
                                printf "$name@$ref:\n"
                                printf "\tname:\t$name\n"
                                printf "\tdir:\t$dir\n"
                                printf "\trepo:\t$repository\n"
                                printf "\tref:\t$ref\n"
                                printf "\tcommit:\t$commit\n"
                                printf "\n"
                            fi
                        fi
                        name=
                        dir=
                        ref=
                        commit=
                        repository=
                        ;;
	        esac
	    done
    done;

}

cmd_update()
{
    require_clean_work_tree

    vendor_git_log_first "$name" |
	while read a b junk; do
	    case "$a" in
		START) ;;
                git-vendor-dir:) dir="$b" ;;
		git-vendor-repository:) repository="$b" ;;
		END)
                    # Make sure the dependency exists on disk
                    if [ ! -d "$dir" ]; then
                        die "Dependency \"$1\" is missing from \"$dir\""
                    fi

                    if [ ! -z "$repository" ];
                    then
                        message="\
Update \"$name\" from \"$repository@$ref\"

git-vendor-name: $name
git-vendor-dir: $dir
git-vendor-repository: $repository
git-vendor-ref: $ref
"
                        git subtree pull --prefix "$dir" --message "$message" "$repository" "$ref" --squash
                        break
                    fi
                    ;;
	    esac
	done
}

cmd_remove()
{
    require_clean_work_tree

    vendor_git_log_first "$name" |
	while read a b junk; do
	    case "$a" in
		START) ;;
                git-vendor-dir:) dir="$b" ;;
		END)
                    # Make sure the dependency exists
                    if [ ! -d "$dir" ]; then
                        die "Dependency \"$1\" is missing from \"$dir\""
                    fi
                    git rm -rf "$dir"
                    git commit --message "Removing \"$name\" from \"$dir\""
                    break
                    ;;
	    esac
	done
}

# Run the command
"cmd_$command" "$@"
